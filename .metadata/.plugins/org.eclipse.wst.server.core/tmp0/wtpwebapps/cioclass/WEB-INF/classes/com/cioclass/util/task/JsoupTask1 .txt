package com.cioclass.util.task;

import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.TriggerContext;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.SchedulingConfigurer;
import org.springframework.scheduling.config.ScheduledTaskRegistrar;
import org.springframework.scheduling.support.CronTrigger;
import org.springframework.stereotype.Component;

import com.cioclass.domain.jsoup.JsoupLinks;
import com.cioclass.service.jsoup.JsoupLinksService;
import com.cioclass.util.DateUtils;
import com.cioclass.util.JsoupUtil;

@Component("jsoupTask1")
@EnableScheduling
public class JsoupTask1 implements SchedulingConfigurer {
	@Autowired
	JsoupLinksService jsoupLinksService;
	private static int speed = 9;

	public void job1() {
		List<JsoupLinks> list = null;
		
		/*向数据库查询时的条件设定*/
		Page<JsoupLinks> page = jsoupLinksService.getList(new Specification<JsoupLinks>() {
			/*select * from jsoup_links where title not null and (url like 'http://' or url like 'https://')
			 * order by id desc limit 0,10;
			 */
			@Override
			public Predicate toPredicate(Root<JsoupLinks> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				Predicate p1 = cb.isNull(root.get("title"));
				Predicate p2 = cb.like(root.get("url"), "http://%");
				Predicate p3 = cb.like(root.get("url"), "https://%");
				return cb.and(p1,cb.or(p2,p3));
			}
		}, getPageable());
		/*获取数据库数据*/
		list = page.getContent();
		
		/*如果没有数据，则减慢速度*/
		if (list == null || list.size() == 0) {
			speed++;
			if (speed < 1 || speed > 12) {
				speed = 1;
			}
			return;
		}
		/*如果有数据，则直接加到最快速度*/
		else {
			speed--;
			if (speed < 1 || speed > 12) {
				speed = 1;
			}
		}
		String url = null, title = null;
		
		/*数据更新操作*/
		if(list!= null && list.size()>0) {
			for (JsoupLinks jl : list) {
				url = jl.getUrl();
				title = JsoupUtil.getDocumentByJsoupBasic(url).title();
				jl.setCreateTime(DateUtils.getNow());
				if (title != null && !"".equals(title)) {
					jl.setTitle(title);
				} else {
					jl.setTitle("无标题");
				}
				jsoupLinksService.save(jl);
			}
		}
	}

	private String speed(int speed) {
		return "0/" + (5 * speed) + " * * * * ?";
	}

	private Pageable getPageable() {
		Sort sort = new Sort(Direction.DESC, "id");
		return new PageRequest(0, 10, sort);
	}
	/*trigger 和job的调用*/
	@Override
	public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {
		taskRegistrar.addTriggerTask(new Runnable() {
			@Override
			public void run() {
				job1();
				System.out.println(speed(speed) + "  ==  " + DateUtils.format(new Date(), DateUtils.DATE_TIME_PATTERN));
			}
		}, new Trigger() {
			@Override
			public Date nextExecutionTime(TriggerContext triggerContext) {
				// 任务触发，可修改任务的执行周期
				CronTrigger trigger = new CronTrigger(speed(speed));
				Date nextExec = trigger.nextExecutionTime(triggerContext);
				return nextExec;
			}
		});
	}
}