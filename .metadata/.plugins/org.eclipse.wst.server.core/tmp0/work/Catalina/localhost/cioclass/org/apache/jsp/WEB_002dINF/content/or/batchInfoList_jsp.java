/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.47
 * Generated at: 2018-01-18 01:03:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.content.or;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class batchInfoList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n");
      out.write("<meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" name=\"viewport\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/statics/css/bootstrap.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/page.css\">\r\n");
      out.write("<title>批号信息列表-洋葱头溯源系统</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"content\"></div>\r\n");
      out.write("<button onclick=\"fresh()\">刷新</button><br>\r\n");
      out.write("每页显示条数：\r\n");
      out.write("<select name=\"perPage\" id=\"perpage\">\r\n");
      out.write("  <option value =\"5\">5</option>\r\n");
      out.write("  <option value =\"10\">10</option>\r\n");
      out.write("  <option value =\"20\">20</option>\r\n");
      out.write("  <option value =\"30\">30</option>\r\n");
      out.write("  <option value =\"50\">50</option>\r\n");
      out.write("</select>\r\n");
      out.write("<br>\r\n");
      out.write("<!-- 分页的内容 -->\r\n");
      out.write("<div id=\"pages\" class=\"pages\"></div>\r\n");
      out.write("<!-- 分页的组件 -->\r\n");
      out.write("<div class=\"page\"></div>\r\n");
      out.write("<script id=\"page-template\" type=\"text/x-handlebars-template\">\r\n");
      out.write("\t<div>每页 {{size}} 条记录</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<table class=\"table\" border=\"1\">\r\n");
      out.write("\t\t\t<caption>批量信息列表</caption>\r\n");
      out.write("\t\t\t<thead>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>编号</th>\r\n");
      out.write("\t\t\t\t\t<th>批次编号</th>\r\n");
      out.write("\t\t\t\t\t<th>生产日期</th>\r\n");
      out.write("\t\t\t\t\t<th>召回状态</th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</thead>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t{{#each content}}\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>{{id}}</td>\r\n");
      out.write("\t\t\t\t\t<td>{{batchNumber}}</td>\r\n");
      out.write("\t\t\t\t\t<td>{{dateOfManufacture}}</td>\r\n");
      out.write("\t\t\t\t\t<td>{{recallStatus}}</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t{{/each}}\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/jquery.page.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/handlebars.js\"></script>\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/common.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("window.onload=function(){\r\n");
      out.write("\tfresh();\r\n");
      out.write("}\r\n");
      out.write("/*调节每页大小*/\r\n");
      out.write("pageSize=4;\r\n");
      out.write("\r\n");
      out.write("$(\"#perpage\").change(function(){\r\n");
      out.write("\tget(1);\r\n");
      out.write("});\r\n");
      out.write("function fresh(){\r\n");
      out.write("\tget(1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function render_news(templateSelector,data,htmlSelector){\r\n");
      out.write("\tvar page = $(templateSelector).html();\r\n");
      out.write("\tvar template = Handlebars.compile(page);\r\n");
      out.write("\tvar html = template(data);\r\n");
      out.write("\t$(htmlSelector).html(html);\r\n");
      out.write("\t\r\n");
      out.write("\tpageCount = data.totalPages;\r\n");
      out.write("\tcurrent = data.number+1;\r\n");
      out.write("\t$(\".page\").createPage({\r\n");
      out.write("\t    pageCount:pageCount,\r\n");
      out.write("\t    current:current,\r\n");
      out.write("\t    funName:\"get\"\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function get(id){\r\n");
      out.write("\tvar perpage = $(\"#perpage\").val();\r\n");
      out.write("\tif(perpage !=\"\"){\r\n");
      out.write("\t\tpageSize = parseInt(perpage);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t$.getJSON(config.serverIp+\"or/batchInfo/getBatchInfoPage\",{\"pageNo\":id,\"pageSize\":pageSize },function(data){\r\n");
      out.write("\t\tmsg = $.parseJSON(data);\r\n");
      out.write("\t\tif( msg.code==\"0\"&& msg.msg==\"OK\"){\r\n");
      out.write("\t\t\trender_news(\"#page-template\",$.parseJSON(data),\"#pages\");\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\tconsole.log(msg.msg);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
