package com.cioclass.service.impl;

import com.cioclass.service.QrcodeService;
import com.swetake.util.Qrcode;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletResponse;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/**
 * @author lb_chen
 */
@Service
public class QrcodeServiceImpl implements QrcodeService {
	/**
	 * L(7%)M(15%)Q(25%)H(30%)
	 */
	private static char L_M_Q_H = 'H';
    private static char SPACE = ' ';
    private static char L = 'L';
    private static char M='M';
    private static char Q='Q';
	@Override
	public void createQrcode(String content, HttpServletResponse response) {
		int img_width = 300;
		int img_height = 300;
		// logo设置
		String logo_path = null;
		int logo_width = 0;
		int logo_height = 0;
		//默认二维码等级
		char level = 'H';
		String file_path = null;
		this.createQrcodeFunction(content, img_width, img_height, logo_path, logo_width, logo_height, response, level,
				file_path);
	}

	@Override
	public void createQrcodeFunction(String content, int imgWidth, int imgHeight, String logoPath, int logoWidth,
									 int logoHeight, HttpServletResponse response, char level, String filePath) {
		if (level != L_M_Q_H && level != SPACE) {
			L_M_Q_H = level;
		}
		try {
			/* 初始值，还没确定 */
            int version = 10;
			byte[] contentByte = content.getBytes("UTF-8");
			int cb_length = contentByte.length;
			version = getVersion(cb_length, 0, 0, 0, L_M_Q_H);
			/* 固定算法,二维码横纵坐标像为版本号的4倍多17个 */
            int count = 17 + version * 4;
			/* 二维码图片横向每一像素显示的大小 */
            int x_count = imgWidth / count;
			/* 二维码图片纵向每一像素显示的大小 */
            int y_count = imgWidth / count;
			/* 二维码图片最左边和最右边间隔 */
            int x_interval = (imgWidth - x_count * count) / 2;
			/* 二维码图片最上方和最下方间隔 */
            int y_interval = (imgHeight - y_count * count) / 2;
			BufferedImage bufImg = new BufferedImage(imgWidth, imgHeight, BufferedImage.TYPE_INT_RGB);
			Graphics2D grap = bufImg.createGraphics();
			grap.setBackground(Color.WHITE);
			grap.clearRect(0, 0, imgWidth, imgHeight);
			grap.setColor(Color.BLACK);
			Qrcode qrcode = new Qrcode();
			qrcode.setQrcodeErrorCorrect(L_M_Q_H);
			qrcode.setQrcodeVersion(++version);
			/* 以字节为内容载体 */
            qrcode.setQrcodeEncodeMode('B');
			boolean[][] codeArray = qrcode.calQrcode(contentByte);
			int i = 0, j = 0;
			for (i = 0; i < count; i++) {
				for (j = 0; j < count; j++) {
					if (codeArray[j][i]) {
						grap.fillRect(j * x_count + x_interval, i * y_count + y_interval, x_count, y_count);
					}
				}
			}
			System.out.println("content length:" + cb_length + ",version:" + version + ",level:" + L_M_Q_H + ",i:" + i
					+ ",j:" + j);
			/* 添加LOGO图片 */
			if (logoPath != null && !"".equals(logoPath)) {
				BufferedImage img = ImageIO.read(new File(logoPath));
				grap.drawImage(img, (imgWidth - logoWidth) / 2, (imgHeight - logoHeight) / 2, logoWidth,
						logoHeight, null);
			}
			/* 保存二维码图片 */
			if (filePath != null && !"".equals(filePath)) {
				String qrcodefile_path = "c:\\logs\\" + filePath + (System.currentTimeMillis() % Math.pow(10, 6)) + ".jpeg";
				System.out.println(qrcodefile_path);
				File f = new File("c:\\logs\\");
				if (!f.exists()) {
					f.mkdirs();
				}
				boolean show_result = ImageIO.write(bufImg, "jpeg", new File(qrcodefile_path));
				System.out.println("保存" + qrcodefile_path + (show_result == true ? "成功" : "失败"));
			}
			/* 释放资源 */
			grap.dispose();
			ImageIO.write(bufImg, "jpeg", response.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
    /** {@inheritDoc} */
	@Override
	public void createBatchQrcode(String content, int img_width, int img_height, String logo_path, int logo_width,
			int logo_height, HttpServletResponse response, char level, String file_path) {
		this.createQrcodeFunction(content, img_width, img_height, logo_path, logo_width, logo_height, response, level, file_path);
	}
	
	/* 选择版本开始 */
	private int getVersion(int total, int begin, int middle, int end, char level) {
		int[] list = {0};
		if (level == L) {
			list = new int[] { 17, 32, 53, 78, 106, 134, 154, 192, 230, 271, 321, 367, 425, 458, 520, 586, 644, 718,
					792, 858 };
		} else if (level == M) {
			list = new int[] { 14, 26, 42, 62, 84, 106, 122, 152, 180, 213, 251, 287, 331, 362, 412, 450, 504, 560, 624,
					666 };
		} else if (level == Q) {
			list = new int[] { 11, 20, 32, 46, 60, 74, 86, 108, 130, 151, 177, 203, 241, 258, 292, 322, 364, 394, 442,
					482 };
		} else {
			list = new int[] { 7, 14, 24, 34, 44, 58, 64, 84, 98, 119, 137, 155, 177, 194, 220, 250, 280, 310, 338,
					382 };
		}
		/* 如果是第一次进入该方法时就计算开始、中间、结束值----开始 */
		if (begin == 0 && middle == 0 && end == 0) {
			int length = list.length - 1;
			begin = 0;
			end = length;
			if (end < begin) {
				System.out.println("数组为空");
				return 19;
			}
			middle = (begin + end) / 2;
		}
		/* 如果是第一次进入该方法时就计算开始、中间、结束值----结束 */
		if (total < list[begin]) {
			return begin;
		} else if (list[end] < total) {
			if (level == L_M_Q_H) {
				L_M_Q_H = 'Q';
				return getVersion(total, 0, 0, 0, 'Q');
			} else if (level == Q) {
				L_M_Q_H = 'M';
				return getVersion(total, 0, 0, 0, 'M');
			} else if (level == M) {
				L_M_Q_H = 'L';
				return getVersion(total, 0, 0, 0, 'L');
			} else {
				return end;
			}
		} else {
			if (list[middle] == total) {
				return middle;
			}
			if (begin == middle) {
				return list[middle] == total ? middle : end;
			}
			// 前
			if (list[middle] > total) {
				end = middle;
				middle = (begin + end) / 2;
				return getVersion(total, begin, middle, end, level);
			}
			// 后
			else if (list[middle] < total) {
				begin = middle;
				middle = (begin + end) / 2;
				return getVersion(total, begin, middle, end, level);
			} else {
				System.out.println("出错了");
				return 0;
			}
		}
	}
	/* 选择版本结束 */
}
